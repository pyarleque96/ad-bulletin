@inject AdCategoryService AdCategoryService

<div class="tp-category-3-area pt-120 pb-90">
    <div class="container">
        <div class="row">
            <div class="col-xl-6">
                <div class="tp-category-3-title-box pb-70">
                    <span class="tp-section-subtitle-3">Hand-Picked Category</span>
                    <h4 class="tp-section-title">Browse items by <span>category</span></h4>
                </div>
            </div>
        </div>
        <div class="row row-cols-xl-4 row-cols-lg-4 row-cols-md-3 row-cols-sm-2 row-cols-1 justify-content-center">
            @foreach (var item in adCategories)
            {
                <div class="col mb-30">
                    <a onclick="@(() => NavigationManager.NavigateTo($"category/{item.Id}", true))" role="button">
                        <div class="tp-category-3-item d-flex align-items-center justify-content-between">
                            <div class="tp-category-3-text">
                                <h5 class="tp-category-3-title">@item.Name</h5>
                                <span>@item.TotalAds &nbsp; ads</span>
                            </div>
                            <div class="tp-category-3-icon">
                                <AdBulletinIconComponent IconName="@item.Icon" />
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<AdCategoryDto> adCategories { get; set; } = new List<AdCategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        LoadingService.Show();
        LoadingService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            adCategories = await AdCategoryService.ListAsync();
            StateHasChanged();
        }
        catch(Exception e)
        {
            await JsRuntime.InvokeVoidAsync("console.log", $"ListAdCategoriesComponent => LoadData() Exception: -- {e.Message} - {e.StackTrace}");
        }
        finally
        {
            await LoadingService.HideLoadingWithJsAsync(JsRuntime);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the event to avoid memory leaks
        LoadingService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }
}
